{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lice2","text":"<p>Lice generates license files. No more hunting down licenses from other projects.</p> <p>Note</p> <p>This project is forked from the original lice project which seems to have been abandoned and is not compatible with Python 3.12.</p> <p>I have created a new project rather than issue a PR because the changes are quite large, and no-one is merging PR's on the original project. Otherwise, the Git history is preserved from the original.</p> <p>This version fixes the compatibility issue and updates the tooling :</p> <ul> <li>It now uses Poetry for   dependency management</li> <li>Can read from a config file for default values</li> <li>Converted from 'argparse' to 'Typer' for CLI handling</li> <li>The code has been modernized and cleaned up, all type-hinting has been added</li> <li>It passes strict linting with the latest 'Ruff' and 'mypy'</li> <li>GitHub actions set up for linting, <code>Dependabot</code> and <code>Dependency Review</code></li> </ul> <p>In addition, future plans can be seen in the Future Plans page.</p> <p>Python Compatibility</p> <p>This appllication is now only compatible with Python 3.9 and above. If you wish to use an older version, use the original 'lice' package.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>There is an optional configuration file that can be used to customize some of the application defaults. This is a TOML file that should be named <code>config.toml</code> and placed in the <code>lice</code> subdirectory of the appliciable configuration directory for your operating system. Generally this is <code>$HOME/.config/</code> on all operating systems.</p> <p>So for example, on a Linux or Mac system, the configuration file would be located at <code>$HOME/.config/lice/config.toml</code>.</p> <p>The TOML file should look like this:</p> <pre><code>[lice]\ndefault_license = \"mit\"\norganization = \"Your Organization\"\n</code></pre> <p>Currently there are only two options that can be set:</p> <ul> <li><code>default_license</code> - This is the default license that will be used if no   license is specified on the command line.</li> <li><code>organization</code> - This is the organization name that will be used in the   license by default. If this is set, it will not try to get the organization   name from <code>git config</code> or the <code>$USER</code> environment variable.</li> </ul>"},{"location":"contributing/","title":"Contributing to Lice2","text":"<p>Thank you for your interest in contributing to Lice2! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue.</p> <p>We also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a pull</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager.</p> </li> <li> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> </li> <li> <p>This project requires Python 3.9 or higher.</p> </li> <li> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p> </li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing. Tests will automatically be run when you submit a pull request. You can also run them manually using the following command:</p> <pre><code>pytest\n</code></pre> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated using github-changelog-md, so please do not edit it manually.</p> <p>For maintainers, there is a POE task that will run this and update the changelog file.</p> <pre><code>poe changelog\n</code></pre> <p>You would also need to add a GitHub Personal Access Token to a local config file as usual. See the section in that tools Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in any Pull Requests. This will be handled by the maintainers when a new release is made. Your GitHub username will be added to the changelog automatically beside your PR.</p>"},{"location":"contributing/#convenience-tasks","title":"Convenience Tasks","text":"<p>There are a few other convenience tasks that can be run using the <code>poe</code> command. These are defined in the <code>pyproject.toml</code> file.</p> <p>Each of these tasks can have extra options added which will be passed to the underlying tool.</p> <p>Run <code>mypy</code> on the code base in strict mode:</p> <pre><code>poe mypy\n</code></pre> <p>Format the code using <code>ruff format</code>:</p> <pre><code>poe format\n</code></pre> <p>Lint the code using <code>ruff check</code>:</p> <pre><code>poe ruff\n</code></pre> <p>Run <code>ruff</code>, <code>mypy</code> and <code>format</code> at the same time:</p> <pre><code>poe lint\n</code></pre>"},{"location":"contributing/#documentation-tasks","title":"Documentation Tasks","text":"<p>These are to help with developing and updating the documentation.</p> <ul> <li><code>poe docs:serve</code> - Serve the MkDocs locally for testing and development</li> <li><code>poe docs:serve:all</code> - Same as above, but opens to all interfaces so you can   view it on other devices on your network</li> <li><code>poe docs:build</code> - Build the MkDocs site into the <code>dist</code> folder</li> <li><code>poe docs:publish</code> - Publish the docs to your GitHub pages. Note that only   those with write-access to this repo can do this.</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to Lice2:</p> <ul> <li>Do not update the version number in the <code>pyproject.toml</code> file. This will be   done by the maintainers when a new release is made.</li> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. We are using   Ruff as both a linter and code formatter.</li> <li>Try to have no linting errors or warnings. The pre-commit hooks will check for   this also.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all tests before submitting a pull request.</li> <li>Document your code using   docstrings.</li> <li>Use GitHub issues   to report bugs or suggest new features.</li> </ul>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"future_plans/","title":"Future Ideas for the project","text":"<ul> <li>Automatically send output to the clipboard.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Installation is standard. If you are using pipx (recommended) install it as:</p> <pre><code>pipx install lice2\n</code></pre> <p>Otherwise use <code>pip</code> as standard:</p> <pre><code>pip install lice2\n</code></pre>"},{"location":"installation/#development-version","title":"Development Version","text":"<p>If you want to install the development version to try out new features before they are release, you can do so with the following command:</p> <pre><code>pipx install git+https://github.com/seapagan/lice2.git\n</code></pre> <p>or</p> <pre><code>pip install git+https://github.com/seapagan/lice2.git\n</code></pre>"},{"location":"installation/#autocompletion","title":"Autocompletion","text":"<p>To enable autocompletion for lice options, run the following command after installation:</p> <pre><code>lice --install-completion\n</code></pre>"},{"location":"overview/","title":"Overview","text":"<p>'Lice' is able to generate license files to stdout (the default) or to a file.</p> <p>It can also generate reduced 'headers' for longer licenses and format the output for specific coding languages, optionally saving the output to a file with the correct extension.</p>"},{"location":"overview/#example-usage","title":"Example Usage","text":"<p>Generate a BSD-3 license, the default</p> <pre><code>$ lice\nCopyright (c) 2013, Jeremy Carbaugh\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\n...\n</code></pre> <p>Generate an MIT license</p> <pre><code>$ lice mit\nThe MIT License (MIT)\nCopyright (c) 2013 Jeremy Carbaugh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n...\n</code></pre> <p>Generate a BSD-3 license, specifying the year and organization to be used</p> <pre><code>$ lice -y 2012 -o \"Sunlight Foundation\"\nCopyright (c) 2012, Sunlight Foundation\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\n...\n</code></pre> <p>Generate a BSD-3 license, formatted for python source file:</p> <pre><code>$ lice -l py\n\n# Copyright (c) 2012, Sunlight Foundation\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without modification,\n...\n</code></pre> <p>Generate a python source file with a BSD-3 license commented in the header:</p> <pre><code>$ lice -l py -f test\n$ ls\ntest.py\n$ cat test.py\n\n# Copyright (c) 2012, Sunlight Foundation\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without modification,\n...\n</code></pre> <p>Generate a source file (language detected by -f  extension):</p> <pre><code>$ lice -f test.c &amp;&amp; cat test.c\n/*\n * Copyright (c) 2012, Sunlight Foundation\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n ...\n</code></pre> <p>If organization is not specified, lice will first attempt to take it from the config file (if it exists) then use <code>git config</code> to find your name. If not found, it will use the value of the $USER environment variable. If the project name is not specified, the name of the current directory is used. Year will default to the current year.</p> <p>You can see what variables are available to you for any of the licenses:</p> <pre><code>$ lice --vars mit\nThe mit license template contains the following variables:\n  year\n  organization\n</code></pre>"},{"location":"overview/#i-want-xxxxxxxxx-license-in-here","title":"I want XXXXXXXXX license in here!","text":"<p>Great! Is it a license that is commonly used? If so, open an issue or, if you are feeling generous, fork and submit a pull request.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>At its simplest, <code>lice</code> will generate a license header for you to the standard output. If you don't specify a license, <code>lice</code> will default to the BSD-3 license.</p> <pre><code>$ lice\n\n Copyright (c) 2024, Grant Ramsay\n\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without modification,\n ...\n</code></pre> <p>It will fill in the current year and your name as the copyright holder.</p>"},{"location":"usage/#specifying-a-license","title":"Specifying a License","text":"<p>You can specify a license as the first option. For example, to generate a MIT license:</p> <pre><code>$ lice mit\n\nThe MIT License (MIT)\nCopyright (c) 2024 Grant Ramsay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n...\n</code></pre> <p>This can be used with any of the options below. Run <code>lice --licenses</code> to see a list of all available licenses.</p>"},{"location":"usage/#command-line-options","title":"Command Line Options","text":"<p><code>lice</code> has a number of command line options to customize the output. For a full list of options, run <code>lice --help</code>.</p>"},{"location":"usage/#-header-option","title":"<code>--header</code> option","text":"<p>This will generate a brief license header that can be used in source files.</p> <pre><code>lice --header\n</code></pre> <p>Again, you can specify a license:</p> <pre><code>lice --header apache\n</code></pre> <p>Note</p> <p>The <code>--header</code> option is not available for all licenses. If it is not available, there will be a message to that effect.</p>"},{"location":"usage/#-org-o-option","title":"<code>--org</code> / <code>-o</code> option","text":"<p>This will allow you to specify an organization name to be used in the license, and can be set in the configuration file under the <code>organization</code> key.</p> <pre><code>lice -o \"Awesome Co.\"\n</code></pre>"},{"location":"usage/#-proj-p-option","title":"<code>--proj</code> / <code>-p</code> option","text":"<p>This will allow you to specify a project name to be used in the license.</p> <pre><code>lice -p \"My Awesome Project\"\n</code></pre> <p>Note</p> <p>Not all licenses support the <code>--proj</code> option. Run <code>lice --licences</code> to see which licenses support this option.</p>"},{"location":"usage/#-template-t-option","title":"<code>--template</code> / <code>-t</code> option","text":"<p>This will allow you to specify a custom template to be used as the license.</p> <pre><code>lice -t \"./path/to/template.txt\"\n</code></pre>"},{"location":"usage/#-year-y-option","title":"<code>--year</code> / <code>-y</code> option","text":"<p>This will allow you to specify a year to be used in the license.</p> <pre><code>lice -y 2024\n</code></pre>"},{"location":"usage/#-language-l-option","title":"<code>--language</code> / <code>-l</code> option","text":"<p>This will allow you to specify a programming language to be used in the license. Specify the extension of the file you are creating the license for.</p> <pre><code>lice -l py\n</code></pre> <p>Currently supported languages are:</p> <p>agda, c, cc, clj, cpp, css, el, erl, f, f90, h, hpp, hs, html, idr, java, js, lisp, lua, m, ml, php, pl, py, ps, rb, scm, sh, txt, rs</p>"},{"location":"usage/#-file-f-option","title":"<code>--file</code> / <code>-f</code> option","text":"<p>This will allow you to specify a file name to be used in the license, and so the license will be written to that file instead of the standard output.</p> <pre><code>lice mit -f \"LICENSE.txt\"\n</code></pre> <p>Note</p> <p>If you specify a language with the <code>-l</code> option, the extension will be automatically added to the file name so you don't need to include it.</p>"},{"location":"usage/#-vars-option","title":"<code>--vars</code> option","text":"<p>This will list the variables that can be used in the specified license.</p> <pre><code>lice --vars mit\n</code></pre>"},{"location":"usage/#-licenses-option","title":"<code>--licenses</code> option","text":"<p>This will list all the available licenses and their parameters.</p> <pre><code>lice --licenses\n</code></pre>"},{"location":"usage/#-languages-option","title":"<code>--languages</code> option","text":"<p>This will list all the available source code formatting languages.</p> <pre><code>lice --languages\n</code></pre>"},{"location":"usage/#-install-completion-option","title":"<code>--install-completion</code> option","text":"<p>This will install tab-completion for the current shell.</p> <pre><code>lice --install-completion\n</code></pre>"},{"location":"usage/#-show-completion-option","title":"<code>--show-completion</code> option","text":"<p>This will show the tab-completion for the current shell, so you can copy it or customize the installation.</p> <pre><code>lice --show-completion\n</code></pre>"},{"location":"usage/#-help-h-option","title":"<code>--help</code> / <code>-h</code> option","text":"<p>Displays help for the application and it's options.</p> <pre><code>lice --help\n</code></pre>"}]}